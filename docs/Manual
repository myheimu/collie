DataNode / ModuleNode 说明：

关于数据节点/模块节点，我们在权限控制上是一致的。
在权限策略上，我们借鉴了Linux文件系统的策略。具体如下：

- 权限种类
   读取（文件夹/文件：若是文件夹能看到文件夹子对象）
   编辑（文件：可以更改属性 文件夹：可以更改属性，且在文件夹内增加或删除文件）

- 对象的操作
   修改： 对象是否可以修改属性（写权限）
   新增： 若当前对象是文件夹，是否可以新增子对象（写权限）
   删除： 是否可以删除当前对象（父对象是否有 写权限）
   点击： 若当前对象是文件夹，是否可以点击进入，并且获取子对象集合（读权限）
   权限修改： 只有创建者可以修改文件权限（仅创建者可修改，无需检查权限）

- 权限查看
   最终体现在是否存在 读取/编辑 权限，先看创建者有没有权限，再看群组是否有权限，最后看所有人是否有权限

- 文件/文件夹包含如下几个属性
   类型：文件夹 / 叶子节点（数据叶子节点/模块叶子节点）
   所有者： 读取 / 编辑
   所在组： 读取 / 编辑 （一个用户可以存在多个组中，那么可以从中指定一个组）
   所有人： 读取 / 编辑

- 权限累加
　　一个用户对某个资源的有效权限是授予这一用户账号的权限与授予该用户所属组的权限的组合。如果用户lchh对“test文件夹”有“读取”权限，netcenter组对 “test文件夹”有“写入”权限，用户ldih属于netcenter组的成员，那么用户lchh对“test文 件夹”有“读取”和“写人”两种权限。

- 文件权限优先于文件夹权限
　　NTFS文件系统的文件权限优先于NTFS的文件夹权限。如果用户lchh对“test文件夹”有“修改”权限，那么即使他对于包含该文件的文件夹只有“读取”权限，他仍然能够修改该文件。

- 权限的继承性
　　新建的文件或者文件夹会自动继承上一级目录或者驱动器的NTFS权限，对普通用户从上一级继续下来的权限是不能直接修改的，只能在此基础上添加其他权限。但如果是系统管理员或者有足够权限的其他类型用户，可以修改继承的权限，或者让文件不再继承上一级目录或者驱动器的NTFS权限。

- 拒绝权限优于其他权限
　　将“拒绝”权限授予用户账号或者组，可以拒绝win7旗舰版用户账号或者组对特定文件或者文件夹的访问。如果用户lchh对“test文件夹”被授予拒绝“写入”权限，netcemei*组对“test文件夹”有“写人”权限，用户lchh属于netcenter组成员，那么用户lchh对“test文件夹”不具有“写人”权限。对于权限的累积规则来说，“拒绝”权限是一个例外。应该尽M避免使用“拒绝”权限，因为允许用户和组进行某种访问比明确拒绝他们进行某种访问更容易做到。应该巧妙地构造组和组织文件央中的资源，使各种各样的“允许”权限就足以满足需要，从而可避免使用“拒绝”权限。

